#!/bin/bash

# The name of the program
PROGRAM_NAME=dag

# Command that gets the directory of this bash script
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# The name of the file to load
DAG_FILENAME=dag_cli_initializer.py

# The current Process ID for creating unique session directories
PROCESSID=$$

# The current time for creating unique session directories
TIMESTAMP=$(date +%s%N)

# The args passed into the script (to be passed into Dag.py)
PASSEDARGS="$@"

# The folder that holds program state data
STATE_DIR="${XDG_STATE_HOME:-$HOME/.local/state}/$PROGRAM_NAME"

# File that gets generated if Dag instance changes directories
CWDFILE=$STATE_DIR/dag-cwd/$PROCESSID-$TIMESTAMP

# Stores the current directory so that Dag starts in that directory
STARTINGDIR=$(pwd)

# Gets python version for dag
PYTHON_VERSION="${DAG_PYTHON_VERSION:-3}"

# While loop that runs forever. This allows Dag to reload itself
# The python command that loads Dag and passes the necessary parameters
#python$PYTHON_VERSION -m cProfile $SCRIPT_DIR/$DAG_FILENAME $CWDFILE $PASSEDARGS
python$PYTHON_VERSION $SCRIPT_DIR/$DAG_FILENAME $CWDFILE $PASSEDARGS

# If CWDFILE was created: Dag instance changed directories, so "exit" into that directory by creating a subshell
# NOTE: maybe someday "dag" is an alias for "source {THIS-FILE}". Running source would allow for CD'ing without making a subhell
# 		Or, could be a function in .bashrc
if test -f "$CWDFILE"; then
	# STORE the new directory
	NEWDIR=$(tail -1 $CWDFILE)
	
	# DELETE Dag Instance's CWD file
	rm $CWDFILE
	
	# CHANGE to new directory
	cd $NEWDIR

	# PRINT out to terminal that we are changing directories
	printf "\n\nDag started in \033[1m\033[4m$STARTINGDIR\033[0m and ended in \033[1m\033[4m$(pwd)\033[0m\n"

	/bin/bash
fi